"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import essence.base_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Request(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NEST_TICK_FIELD_NUMBER: builtins.int
    FIELD_FIELD_NUMBER: builtins.int
    nest_tick: builtins.int
    """一次调用多个tick"""
    @property
    def field(self) -> essence.base_pb2.Field:
        """场，包含所有实体"""
    def __init__(
        self,
        *,
        nest_tick: builtins.int = ...,
        field: essence.base_pb2.Field | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["field", b"field"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["field", b"field", "nest_tick", b"nest_tick"]) -> None: ...

global___Request = Request

@typing_extensions.final
class Result(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HISTORY_FIELD_NUMBER: builtins.int
    @property
    def history(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[essence.base_pb2.Field]:
        """一次返回多个tick"""
    def __init__(
        self,
        *,
        history: collections.abc.Iterable[essence.base_pb2.Field] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["history", b"history"]) -> None: ...

global___Result = Result
